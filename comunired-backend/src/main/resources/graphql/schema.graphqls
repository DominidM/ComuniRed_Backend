#########################
# Schema GraphQL para ComuniRed (limpio)
#########################

# Tipos principales
type Usuario {
  id: ID!
  foto_perfil: String
  nombre: String!
  apellido: String!
  dni: String!
  numero_telefono: String
  edad: Int
  sexo: String
  distrito: String
  codigo_postal: String
  direccion: String
  email: String!
  rol_id: ID!
}

input UsuarioInput {
  foto_perfil: String
  nombre: String!
  apellido: String!
  dni: String!
  numero_telefono: String
  edad: Int
  sexo: String
  distrito: String
  codigo_postal: String
  direccion: String
  email: String!
  password: String
  rol_id: ID!
}

type UsuarioPage {
  content: [Usuario!]!
  totalElements: Int!
  totalPages: Int!
  number: Int!
  size: Int!
}

type Rol {
  id: ID!
  nombre: String!
  descripcion: String
}

type RolPage {
  content: [Rol!]!
  totalPages: Int!
  totalElements: Int!
  number: Int!
  size: Int!
}

type AuthPayload {
  token: String
  usuario: Usuario
}

type Categoria {
  id: ID
  nombre: String
  descripcion: String
  activo: Boolean
}

type Estados_queja {
  id: ID
  clave: String
  nombre: String
  descripcion: String
  orden: Int
}

type Tipos_reaccion {
  id: ID!
  key: String!
  label: String!
  activo: Boolean!
  orden: Int!
}

#########################
# Queries
#########################
type Query {
  obtenerUsuarios(page: Int!, size: Int!): UsuarioPage
  obtenerTodosLosUsuarios: [Usuario!]!
  contarUsuariosPorRol(rol_id: ID!): Int
  obtenerUsuarioPorId(id: ID!): Usuario

  obtenerRoles(page: Int!, size: Int!): RolPage
  obtenerTodosLosRoles: [Rol!]!
  obtenerRolPorId(id: ID!): Rol

  listarCategorias: [Categoria]
  buscarCategoriaPorNombre(nombre: String!): Categoria

  listarEstados: [Estados_queja]
  buscarEstadoPorNombre(nombre: String!): Estados_queja


  listarTiposReaccion: [Tipos_reaccion!]!
  obtenerTipoReaccionPorId(id: ID!): Tipos_reaccion
  buscarTipoReaccionPorLabel(label: String!): Tipos_reaccion
}
  

#########################
# Mutations
#########################
type Mutation {
  crearUsuario(usuario: UsuarioInput!): Usuario
  actualizarUsuario(id: ID!, usuario: UsuarioInput!): Usuario
  eliminarUsuario(id: ID!): Boolean

  login(email: String!, password: String!): AuthPayload

  crearRol(nombre: String!, descripcion: String): Rol
  editarRol(id: ID!, nombre: String!, descripcion: String): Rol
  eliminarRol(id: ID!): Boolean

  crearCategoria(nombre: String!, descripcion: String, activo: Boolean): Categoria
  actualizarCategoria(id: ID!, nombre: String!, descripcion: String, activo: Boolean): Categoria
  eliminarCategoria(id: ID!): Boolean


  crearEstado(clave: String!, nombre: String!, descripcion: String, orden: Int!): Estados_queja
  actualizarEstado(id: ID!, clave: String!, nombre: String!, descripcion: String, orden: Int!): Estados_queja
  eliminarEstado(id: ID!): String


  crearTipoReaccion(key: String!, label: String!, activo: Boolean!, orden: Int!): Tipos_reaccion

  actualizarTipoReaccion(id: ID!, key: String!, label: String!, activo: Boolean!, orden: Int!): Tipos_reaccion

  eliminarTipoReaccion(id: ID!): Boolean
}